1. Install MSW
First, add MSW as a development dependency:
bashnpm install msw --save-dev
2. Create the Mock Service Worker Files
Create a directory structure for your mocks:
bashmkdir -p src/mocks/handlers
3. Create API Handlers
Create a file for your API handlers at src/mocks/handlers/index.js:
javascriptimport { http, HttpResponse } from 'msw'

// Define your API mocks here
export const handlers = [
  // Example: GET request
  http.get('/api/users', () => {
    return HttpResponse.json([
      { id: 1, name: 'John Doe' },
      { id: 2, name: 'Jane Smith' },
    ])
  }),
  
  // Example: POST request
  http.post('/api/users', async ({ request }) => {
    const newUser = await request.json()
    return HttpResponse.json({ id: 3, ...newUser }, { status: 201 })
  }),
  
  // Add more handlers as needed
]
4. Create the Browser Setup
Create a file at src/mocks/browser.js:
javascriptimport { setupWorker } from 'msw/browser'
import { handlers } from './handlers'

// This configures a Service Worker with the given request handlers
export const worker = setupWorker(...handlers)
5. Create the Node Setup (for Jest Tests)
Create a file at src/mocks/node.js:
javascriptimport { setupServer } from 'msw/node'
import { handlers } from './handlers'

// This configures a request mocking server with the given request handlers
export const server = setupServer(...handlers)
6. Initialize MSW in Your Application
Modify your src/index.js to initialize MSW in development mode:
javascriptimport React from 'react'
import ReactDOM from 'react-dom'
import App from './App'

async function prepare() {
  if (process.env.NODE_ENV === 'development') {
    const { worker } = await import('./mocks/browser')
    return worker.start({
      onUnhandledRequest: 'bypass', // 'warn' | 'error' | 'bypass'
    })
  }
  return Promise.resolve()
}

prepare().then(() => {
  ReactDOM.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
    document.getElementById('root')
  )
})
7. Create the Service Worker File
You need to copy the MSW service worker to your public directory. Add this script to your package.json in the "scripts" section:
json"scripts": {
  "msw:init": "msw init public/ --save"
}
And run it:
bashnpm run msw:init
8. Setup MSW for Jest Tests
Create or update your Jest setup file (you might need to reference this in your Jest config):
javascript// src/setupTests.js
import { server } from './mocks/node'

// Establish API mocking before all tests
beforeAll(() => server.listen())

// Reset any request handlers that we may add during the tests
afterEach(() => server.resetHandlers())

// Clean up after the tests are finished
afterAll(() => server.close())
Make sure your Jest configuration includes this setup file. In your package.json:
json"jest": {
  "setupFilesAfterEnv": [
    "<rootDir>/src/setupTests.js"
  ]
}
9. Update Your Test Coverage Configuration
Since you're using Jest for code coverage (as seen in your package.json), you might want to exclude the mock files from coverage:
Add to your Jest configuration:
json"jest": {
  "coveragePathIgnorePatterns": [
    "node_modules",
    "src/mocks"
  ]
}
10. Usage Examples
In Components:
jsxfunction UserList() {
  const [users, setUsers] = useState([])
  
  useEffect(() => {
    fetch('/api/users')
      .then(res => res.json())
      .then(data => setUsers(data))
  }, [])
  
  return (
    <ul>
      {users.map(user => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  )
}
In Tests:
javascriptimport { render, screen, waitFor } from '@testing-library/react'
import UserList from './UserList'
import { server } from '../mocks/node'
import { http, HttpResponse } from 'msw'

test('renders users from API', async () => {
  render(<UserList />)
  
  // Wait for the users to be loaded
  await waitFor(() => {
    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('Jane Smith')).toBeInTheDocument()
  })
})

test('handles error state', async () => {
  // Override the default handler for this specific test
  server.use(
    http.get('/api/users', () => {
      return HttpResponse.error()
    })
  )
  
  render(<UserList />)
  
  // Test error handling
  await waitFor(() => {
    expect(screen.getByText('Error loading users')).toBeInTheDocument()
  })
})
These steps should integrate MSW into your React project, allowing you to mock API responses both during development and in tests.
